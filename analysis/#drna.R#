require(ggplot2)
require(Biostrings)
require(GenomicAlignments)
require(tidyverse)
require(gridExtra)
require(ShortRead)

datadir='~/data/ncov/'
dbxdir='~/Dropbox/timplab_data/ncov/drna/'

##devel from plot for timp ubiome
bam2df <- function(bam) {
    dat.raw=readGAlignments(bam, use.names=T)
    dat.gr=granges(dat.raw)
    chroms=seqlevels(dat.gr)
    perchrom.len=data.frame(chr=factor(as.character(seqnames(dat.gr)), levels=chroms), rlength=width(dat.gr))

    if (dim(perchrom.len)[1] < 1) {
        perchrom.len=rbind(perchrom.len, data.frame(chr='none', rlength=0))
    }
    return(perchrom.len)
}

samps=c('HP4', 'HP20')

alignlens=data.frame(chr=as.character(), rlength=as.numeric(), samp=as.character())
readlens=data.frame(samp=as.character(), lens=as.numeric())
numreads=data.frame(samp=as.character(), numreads=as.numeric())
fullcovs=data.frame(samp=as.character(), cov=as.numeric(), pos=as.numeric(), normcov=as.numeric())
binyields=data.frame(samp=as.character(), bin=as.numeric(), yield=as.numeric())
alignyields=data.frame(samp=as.character(), alignbins=as.numeric(), yield=as.numeric())

for (i in samps) {
    bamfile=paste0(datadir, i, '/align/', i, '.sorted.bam')
    alignlen=bam2df(bamfile)
    alignlen$samp=i

    numalign=dim(alignlen)[1]
    numreads=rbind(numreads, data.frame(samp=i, numreads=numalign))
    
    alignlens=rbind(alignlen, alignlens)

    align=readGAlignments(bamfile, use.names=T)
    cov=as.numeric(coverage(align, drop.D.ranges=TRUE)[[1]])
    pos=seq(1, length(cov), 1)
    fullcov=data.frame(samp=i, cov, pos)
    fullcov$normcov=fullcov$cov/sum(fullcov$cov)

    fullcovs=rbind(fullcov, fullcovs)

    fqfile=paste0(datadir, i, '/fastqs/', i, '_dna.fq')
    fq=FastqFile(fqfile)
    reads=readFastq(fq)
    readlen=data.frame(samp=i, lens=width(sread(reads)))

    readlens=rbind(readlens, readlen)

    binyield=data.frame(readbins=seq(0, max(readlen$lens), 1000), yield=0)
    for (j in readlen$lens) {
        bin=sum(j>binyield$readbins)
        binyield$yield[bin]=binyield$yield[bin] + j
    }
    binyield$samp=i
    binyields=rbind(binyield, binyields)


    alignyield=data.frame(alignbins=seq(0, max(readlen$lens), 1000), yield=0)
    for (j in alignlen$rlength) {
        bin=sum(j>alignyield$alignbins)
        alignyield$yield[bin]=alignyield$yield[bin] + j
    }
    alignyield$samp=i
    alignyields=rbind(alignyield, alignyields)
}

binyields$kb=binyields$yield/1000
alignyields$kb=alignyields$yield/1000

pdf(paste0(dbxdir, 'hp4_hp20.pdf'), height=5, width=16)
lendens=ggplot(readlens, aes(x=lens, colour=samp, fill=samp, alpha=.25)) +
    geom_density() +
    ggtitle('Read Lengths') +
    theme_bw()
print(lendens)

yieldbar=ggplot(binyields, aes(x=readbins, y=kb, colour=samp, fill=samp, alpha=.25)) +
    geom_bar(stat='identity') +
    ggtitle('Yield') +
    xlim(1000, 45000) +
    ylim(0, 600) +
    xlab('Read Length') +
    ylab('Yield (Kb)') +
    theme_bw()
print(yieldbar)

alignyieldbar=ggplot(alignyields, aes(x=alignbins, y=kb, colour=samp, fill=samp, alpha=.25)) +
    geom_bar(stat='identity') +
    ggtitle('Yield (Aligned)') +
    xlim(1000, 45000) +
    ylim(0, 600) +
    xlab('Read Length') +
    ylab('Yield (Kb)') +
    theme_bw()
print(alignyieldbar)        

aligndens=ggplot(alignlens, aes(x=rlength, colour=samp, fill=samp, alpha=.25)) +
    geom_density() +
    ggtitle('Alignment Lengths') +
    theme_bw()
print(aligndens)

covplot=ggplot(fullcovs, aes(x=pos, y=normcov, colour=samp)) +
    geom_line() +
    ggtitle('Coverage') +
    theme_bw()
print(covplot)
dev.off()

  


